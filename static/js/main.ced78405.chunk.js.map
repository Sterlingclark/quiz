{"version":3,"sources":["App.js","index.js"],"names":["App","categories","setCategories","useState","selectedCategory","setSelectedCategory","questionType","setQuestionType","difficulty","setDifficulty","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","userAnswers","setUserAnswers","decodeHTMLEntities","text","textArea","document","createElement","innerHTML","value","useEffect","fetch","then","response","json","data","trivia_categories","React","className","length","map","answer","index","key","question","correct","Fragment","onChange","e","target","category","id","name","onClick","fetchQuestions","concat","results","disabled","incorrect_answers","correct_answer","sort","Math","random","answerOption","handleAnswerOptionClick","isCorrect","nextQuestion","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ced78405.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [questionType, setQuestionType] = useState('');\n  const [difficulty, setDifficulty] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [userAnswers, setUserAnswers] = useState([]);\n\n  useEffect(() => {\n    fetch('https://opentdb.com/api_category.php')\n      .then(response => response.json())\n      .then(data => setCategories(data.trivia_categories));\n  }, []);\n\n  const fetchQuestions = () => {\n    fetch(`https://opentdb.com/api.php?amount=5&category=${selectedCategory}&type=${questionType}&difficulty=${difficulty}`)\n      .then(response => response.json())\n      .then(data => setQuestions(data.results));\n  };\n\n  const handleCategoryChange = (e) => {\n    setSelectedCategory(e.target.value);\n  };\n\n  const handleTypeChange = (e) => {\n    setQuestionType(e.target.value);\n  };\n\n  const handleDifficultyChange = (e) => {\n    setDifficulty(e.target.value);\n  };\n\n  const handleAnswerOptionClick = (answer, isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    setUserAnswers([\n      ...userAnswers,\n      { question: questions[currentQuestion].question, answer, correct: questions[currentQuestion].correct_answer }\n    ]);\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  function decodeHTMLEntities(text) {\n    var textArea = document.createElement('textarea');\n    textArea.innerHTML = text;\n    return textArea.value;\n  }\n\n  return (\n    <div className=\"App container\">\n      {showScore ? (\n        <div className=\"score-section\">\n          <h2>You scored {score} out of {questions.length}</h2>\n          <h3>Review Your Answers:</h3>\n          <ul className=\"list-group\">\n            {userAnswers.map((answer, index) => (\n              <li key={index} className=\"list-group-item\">\n                <p><strong>Question:</strong> {decodeHTMLEntities(answer.question)}</p>\n                <p><strong>Your Answer:</strong> {decodeHTMLEntities(answer.answer)}</p>\n                <p><strong>Correct Answer:</strong> {decodeHTMLEntities(answer.correct)}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <>\n          <h1 className=\"my-4\">Quiz App</h1>\n          {questions.length === 0 ? (\n            <div className=\"mb-4\">\n              <div className=\"form-group\">\n                <label>Select Category: </label>\n                <select value={selectedCategory} onChange={handleCategoryChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  {categories.map((category) => (\n                    <option key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Select Type: </label>\n                <select value={questionType} onChange={handleTypeChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  <option value=\"multiple\">Multiple Choice</option>\n                  <option value=\"boolean\">True / False</option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Select Difficulty: </label>\n                <select value={difficulty} onChange={handleDifficultyChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  <option value=\"easy\">Easy</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"hard\">Hard</option>\n                </select>\n              </div>\n              <button onClick={fetchQuestions} disabled={!selectedCategory || !questionType || !difficulty} className=\"btn btn-primary\">\n                Start Quiz\n              </button>\n            </div>\n          ) : (\n            <>\n              <div className=\"question-section\">\n                <div className=\"question-count\">\n                  <span>Question {currentQuestion + 1}</span>/{questions.length}\n                </div>\n                <div className=\"question-text\">\n                  {decodeHTMLEntities(questions[currentQuestion].question)}\n                </div>\n              </div>\n              <div className=\"answer-section\">\n                {questions[currentQuestion].incorrect_answers.concat(questions[currentQuestion].correct_answer)\n                  .sort(() => Math.random() - 0.5)\n                  .map((answerOption, index) => (\n                    <button\n                      key={index}\n                      onClick={() => handleAnswerOptionClick(answerOption, answerOption === questions[currentQuestion].correct_answer)}\n                      className=\"btn btn-outline-primary btn-block\"\n                    >\n                      {decodeHTMLEntities(answerOption)}\n                    </button>\n                  ))}\n              </div>\n            </>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}