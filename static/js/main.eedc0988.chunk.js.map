{"version":3,"sources":["App.js","index.js"],"names":["App","categories","setCategories","useState","selectedCategory","setSelectedCategory","questionType","setQuestionType","difficulty","setDifficulty","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","userAnswers","setUserAnswers","loading","setLoading","animation","setAnimation","showModal","setShowModal","useEffect","fetch","then","response","json","data","trivia_categories","restartQuiz","decodeHTMLEntities","text","textArea","document","createElement","innerHTML","value","React","className","onClick","role","length","map","answer","index","key","question","correct","autoPlay","loop","muted","src","type","Fragment","onChange","e","target","category","id","name","fetchQuestions","concat","results","disabled","incorrect_answers","correct_answer","sort","Math","random","answerOption","handleAnswerOptionClick","isCorrect","nextQuestion","style","display","tabIndex","aria-label","aria-hidden","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.eedc0988.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [questionType, setQuestionType] = useState('');\n  const [difficulty, setDifficulty] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [animation, setAnimation] = useState('');\n  const [showModal, setShowModal] = useState(false);\n\n  useEffect(() => {\n    fetch('https://opentdb.com/api_category.php')\n      .then(response => response.json())\n      .then(data => setCategories(data.trivia_categories));\n  }, []);\n\n  const fetchQuestions = () => {\n    setLoading(true);\n    fetch(`https://opentdb.com/api.php?amount=5&category=${selectedCategory}&type=${questionType}&difficulty=${difficulty}`)\n      .then(response => response.json())\n      .then(data => {\n        setQuestions(data.results);\n        setLoading(false);\n      });\n  };\n\n  const handleCategoryChange = (e) => {\n    setSelectedCategory(e.target.value);\n  };\n\n  const handleTypeChange = (e) => {\n    setQuestionType(e.target.value);\n  };\n\n  const handleDifficultyChange = (e) => {\n    setDifficulty(e.target.value);\n  };\n\n  const handleAnswerOptionClick = (answer, isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    setUserAnswers([\n      ...userAnswers,\n      { question: questions[currentQuestion].question, answer, correct: questions[currentQuestion].correct_answer }\n    ]);\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n      setShowModal(true);\n      if (score + 1 === questions.length) {\n        setAnimation('fireworks');\n      } else if (score + 1 < questions.length / 2) {\n        setAnimation('frownies');\n      }\n    }\n  };\n\n  const restartQuiz = () => { // restart quiz on user input\n    setSelectedCategory('');\n    setQuestionType('');\n    setDifficulty('');\n    setQuestions([]);\n    setCurrentQuestion(0);\n    setScore(0);\n    setShowScore(false);\n    setUserAnswers([]);\n    setAnimation('');\n    setShowModal(false);\n  };\n\n  function decodeHTMLEntities(text) {\n    var textArea = document.createElement('textarea');\n    textArea.innerHTML = text;\n    return textArea.value;\n  }\n\n  return (\n    <div className=\"App container\">\n      <header className=\"my-4\">\n        <h1>Quiz App</h1>\n        {showScore && (\n          <button onClick={restartQuiz} className=\"btn btn-secondary\">Redo Quiz</button>\n        )}\n      </header>\n\n      {loading ? (\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      ) : showScore ? (\n        <div className=\"score-section\">\n          <h2>You scored {score} out of {questions.length}</h2>\n          <h3>Review Your Answers:</h3>\n          <ul className=\"list-group\">\n            {userAnswers.map((answer, index) => (\n              <li key={index} className=\"list-group-item\">\n                <p><strong>Question:</strong> {decodeHTMLEntities(answer.question)}</p>\n                <p><strong>Your Answer:</strong> {decodeHTMLEntities(answer.answer)}</p>\n                <p><strong>Correct Answer:</strong> {decodeHTMLEntities(answer.correct)}</p>\n              </li>\n            ))}\n          </ul>\n          {animation === 'fireworks' && (\n            <div className=\"fireworks\">\n              <video autoPlay loop muted>\n                <source src=\"/fireworks.mp4\" type=\"video/mp4\" />\n              </video>\n            </div>\n          )}\n          {animation === 'frownies' && (\n            <div className=\"frownies\">\n              <video autoPlay loop muted>\n                <source src=\"/frowny-face.mp4\" type=\"video/mp4\" />\n              </video>\n            </div>\n          )}\n        </div>\n      ) : (\n        <>\n          {questions.length === 0 ? (\n            <div className=\"mb-4\">\n              <div className=\"form-group\">\n                <label>Select Category: </label>\n                <select value={selectedCategory} onChange={handleCategoryChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  {categories.map((category) => (\n                    <option key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Select Type: </label>\n                <select value={questionType} onChange={handleTypeChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  <option value=\"multiple\">Multiple Choice</option>\n                  <option value=\"boolean\">True / False</option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Select Difficulty: </label>\n                <select value={difficulty} onChange={handleDifficultyChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  <option value=\"easy\">Easy</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"hard\">Hard</option>\n                </select>\n              </div>\n              <button onClick={fetchQuestions} disabled={!selectedCategory || !questionType || !difficulty} className=\"btn btn-primary\">\n                Start Quiz\n              </button>\n            </div>\n          ) : (\n            <div className=\"card my-4\">\n              <div className=\"card-body\">\n                <div className=\"question-section\">\n                  <div className=\"question-count\">\n                    <span>Question {currentQuestion + 1}</span>/{questions.length}\n                  </div>\n                  <div className=\"question-text\">\n                    {decodeHTMLEntities(questions[currentQuestion].question)}\n                  </div>\n                </div>\n                <div className=\"answer-section\">\n                  {questions[currentQuestion].incorrect_answers.concat(questions[currentQuestion].correct_answer)\n                    .sort(() => Math.random() - 0.5)\n                    .map((answerOption, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleAnswerOptionClick(answerOption, answerOption === questions[currentQuestion].correct_answer)}\n                        className=\"btn btn-outline-primary btn-block my-2\"\n                      >\n                        {decodeHTMLEntities(answerOption)}\n                      </button>\n                    ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      <footer className=\"mt-4\">\n        <p>&copy; 2024 Quiz App. All rights reserved.</p>\n      </footer>\n\n      <div className={`modal fade ${showModal ? 'show' : ''}`} style={{ display: showModal ? 'block' : 'none' }} tabIndex=\"-1\" role=\"dialog\">\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\">Your Score</h5>\n              <button type=\"button\" className=\"close\" onClick={() => setShowModal(false)} aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <p>You scored {score} out of {questions.length}</p>\n              {animation === 'fireworks' && (\n                <div className=\"fireworks\">\n                  <video autoPlay loop muted>\n                    <source src=\"/fireworks.mp4\" type=\"video/mp4\" />\n                  </video>\n                </div>\n              )}\n              {animation === 'frownies' && (\n                <div className=\"frownies\">\n                  <video autoPlay loop muted>\n                    <source src=\"/frowny-face.mp4\" type=\"video/mp4\" />\n                  </video>\n                </div>\n              )}\n            </div>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn btn-primary\" onClick={restartQuiz}>Restart Quiz</button>\n              <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setShowModal(false)}>Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}