{"version":3,"sources":["App.js","index.js"],"names":["App","categories","setCategories","useState","selectedCategory","setSelectedCategory","questionType","setQuestionType","difficulty","setDifficulty","questions","setQuestions","currentQuestion","setCurrentQuestion","score","setScore","showScore","setShowScore","userAnswers","setUserAnswers","loading","setLoading","animation","setAnimation","showModal","setShowModal","totalTestsTaken","setTotalTestsTaken","totalScore","setTotalScore","quizCompleted","setQuizCompleted","decodeHTMLEntities","text","textArea","document","createElement","innerHTML","value","useEffect","fetch","then","response","json","data","trivia_categories","React","className","onClick","handleViewTotalClick","restartQuiz","role","length","map","answer","index","key","question","correct","Fragment","onChange","e","target","category","id","name","fetchQuestions","concat","results","disabled","incorrect_answers","correct_answer","sort","Math","random","answerOption","handleAnswerOptionClick","isCorrect","nextQuestion","style","display","tabIndex","type","aria-label","aria-hidden","autoPlay","loop","muted","src","process","width","height","paddingBottom","position","frameBorder","allowFullScreen","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5f54d100.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [questionType, setQuestionType] = useState('');\n  const [difficulty, setDifficulty] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [animation, setAnimation] = useState('');\n  const [showModal, setShowModal] = useState(false);\n  const [totalTestsTaken, setTotalTestsTaken] = useState(0);\n  const [totalScore, setTotalScore] = useState(0);\n  const [quizCompleted, setQuizCompleted] = useState(false); // New state variable\n\n  useEffect(() => {\n    fetch('https://opentdb.com/api_category.php')\n      .then(response => response.json())\n      .then(data => setCategories(data.trivia_categories));\n  }, []);\n\n  const fetchQuestions = () => {\n    setLoading(true);\n    fetch(`https://opentdb.com/api.php?amount=5&category=${selectedCategory}&type=${questionType}&difficulty=${difficulty}`)\n      .then(response => response.json())\n      .then(data => {\n        setQuestions(data.results);\n        setLoading(false);\n      });\n  };\n\n  const handleCategoryChange = (e) => {\n    setSelectedCategory(e.target.value);\n  };\n\n  const handleTypeChange = (e) => {\n    setQuestionType(e.target.value);\n  };\n\n  const handleDifficultyChange = (e) => {\n    setDifficulty(e.target.value);\n  };\n\n  const handleAnswerOptionClick = (answer, isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    setUserAnswers([\n      ...userAnswers,\n      { question: questions[currentQuestion].question, answer, correct: questions[currentQuestion].correct_answer }\n    ]);\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n      setTotalTestsTaken(totalTestsTaken + 1);\n      setTotalScore(totalScore + score + 1);\n      setQuizCompleted(true); // Set quizCompleted to true\n\n      if (score + 1 === questions.length) {\n        setAnimation('fireworks');\n      } else if (score + 1 < questions.length / 2) {\n        setAnimation('frownies');\n      }\n    }\n  };\n\n  const handleViewTotalClick = () => {\n    setShowModal(true);\n  };\n\n  const restartQuiz = () => {\n    setSelectedCategory('');\n    setQuestionType('');\n    setDifficulty('');\n    setQuestions([]);\n    setCurrentQuestion(0);\n    setScore(0);\n    setShowScore(false);\n    setUserAnswers([]);\n    setAnimation('');\n    setShowModal(false);\n  };\n\n  function decodeHTMLEntities(text) {\n    var textArea = document.createElement('textarea');\n    textArea.innerHTML = text;\n    return textArea.value;\n  }\n\n  return (\n    <div className=\"App container\">\n      <header className=\"my-4\">\n        <h1>Billy Quiz Boy!\n        </h1>\n        {quizCompleted && (\n          <button onClick={handleViewTotalClick} className=\"btn btn-info mr-2\">View Total Score</button>\n        )}\n        {showScore && (\n          <button onClick={restartQuiz} className=\"btn btn-secondary\">Restart Quiz</button>\n        )}\n      </header>\n\n      {loading ? (\n        <div className=\"spinner-border text-primary\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </div>\n      ) : showScore ? (\n        <div className=\"score-section\">\n          <h2>You scored {score} out of {questions.length}</h2>\n          <h3>Review Your Answers:</h3>\n          <ul className=\"list-group\">\n            {userAnswers.map((answer, index) => (\n              <li key={index} className=\"list-group-item\">\n                <p><strong>Question:</strong> {decodeHTMLEntities(answer.question)}</p>\n                <p><strong>Your Answer:</strong> {decodeHTMLEntities(answer.answer)}</p>\n                <p><strong>Correct Answer:</strong> {decodeHTMLEntities(answer.correct)}</p>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <>\n          {questions.length === 0 ? (\n            <div className=\"mb-4\">\n              <div className=\"form-group\">\n                <label>Select Category: </label>\n                <select value={selectedCategory} onChange={handleCategoryChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  {categories.map((category) => (\n                    <option key={category.id} value={category.id}>\n                      {category.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Select Type: </label>\n                <select value={questionType} onChange={handleTypeChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  <option value=\"multiple\">Multiple Choice</option>\n                  <option value=\"boolean\">True / False</option>\n                </select>\n              </div>\n              <div className=\"form-group\">\n                <label>Select Difficulty: </label>\n                <select value={difficulty} onChange={handleDifficultyChange} className=\"form-control\">\n                  <option value=\"\">Select</option>\n                  <option value=\"easy\">Easy</option>\n                  <option value=\"medium\">Medium</option>\n                  <option value=\"hard\">Hard</option>\n                </select>\n              </div>\n              <button onClick={fetchQuestions} disabled={!selectedCategory || !questionType || !difficulty} className=\"btn btn-primary\">\n                Start Quiz\n              </button>\n            </div>\n          ) : (\n            <div className=\"card my-4\">\n              <div className=\"card-body\">\n                <div className=\"question-section\">\n                  <div className=\"question-count\">\n                    <span>Question {currentQuestion + 1}</span>/{questions.length}\n                  </div>\n                  <div className=\"question-text\">\n                    {decodeHTMLEntities(questions[currentQuestion].question)}\n                  </div>\n                </div>\n                <div className=\"answer-section\">\n                  {questions[currentQuestion].incorrect_answers.concat(questions[currentQuestion].correct_answer)\n                    .sort(() => Math.random() - 0.5)\n                    .map((answerOption, index) => (\n                      <button\n                        key={index}\n                        onClick={() => handleAnswerOptionClick(answerOption, answerOption === questions[currentQuestion].correct_answer)}\n                        className=\"btn btn-outline-primary btn-block my-2\"\n                      >\n                        {decodeHTMLEntities(answerOption)}\n                      </button>\n                    ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      <footer className=\"mt-4\">\n        <p>&copy; 2024 Quiz App. All rights reserved. But not Really</p>\n      </footer>\n\n      <div className={`modal fade ${showModal ? 'show' : ''}`} style={{ display: showModal ? 'block' : 'none' }} tabIndex=\"-1\" role=\"dialog\">\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\">Your Total Score</h5>\n              <button type=\"button\" className=\"close\" onClick={() => setShowModal(false)} aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <p>Total Tests Taken: {totalTestsTaken}</p>\n              <p>Total Score: {totalScore}</p>\n              {animation === 'fireworks' && (\n                <div className=\"animation-container\">\n                  <video className=\"animation\" autoPlay loop muted>\n                    <source src={`${process.env.PUBLIC_URL}/fireworks.mp4`} type=\"video/mp4\" />\n                  </video>\n                </div>\n              )}\n              {animation === 'frownies' && (\n                <div className=\"animation-container\">\n                  <div style={{width: '100%', height: '0', paddingBottom: '83%', position: 'relative'}}>\n                    <iframe src=\"https://giphy.com/embed/OPU6wzx8JrHna\" width=\"100%\" height=\"100%\" style={{position: 'absolute'}} frameBorder=\"0\" className=\"giphy-embed\" allowFullScreen></iframe>\n                  </div>\n                </div>\n              )}\n            </div>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setShowModal(false)}>Close</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}